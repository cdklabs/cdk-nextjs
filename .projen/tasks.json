{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Full release build",
      "steps": [
        {
          "spawn": "default"
        },
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "post-compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "bump": {
      "name": "bump",
      "description": "Bumps version based on latest git tag and generates a changelog entry",
      "env": {
        "OUTFILE": "package.json",
        "CHANGELOG": "dist/changelog.md",
        "BUMPFILE": "dist/version.txt",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": "",
        "BUMP_PACKAGE": "commit-and-tag-version@^12",
        "RELEASABLE_COMMITS": "git log --no-merges --oneline $LATEST_TAG..HEAD -E --grep \"^(feat|fix|chore|refactor|perf){1}(\\([^()[:space:]]+\\))?(!)?:[[:blank:]]+.+\""
      },
      "steps": [
        {
          "builtin": "release/bump-version"
        }
      ],
      "condition": "git log --oneline -1 | grep -qv \"chore(release):\""
    },
    "bundle": {
      "name": "bundle",
      "description": "Prepare assets",
      "steps": [
        {
          "spawn": "bundle:lambdas/assets-deployment/assets-deployment.lambda"
        },
        {
          "spawn": "bundle:lambdas/revalidate/revalidate.lambda"
        },
        {
          "spawn": "bundle:lambdas/sign-fn-url/sign-fn-url.lambda"
        },
        {
          "exec": "mkdir -p lib/nextjs-build"
        },
        {
          "exec": "cp src/nextjs-build/assets-deployment.Dockerfile assets/lambdas/assets-deployment/assets-deployment.lambda"
        },
        {
          "exec": "cp src/nextjs-build/builder.Dockerfile lib/nextjs-build"
        },
        {
          "exec": "cp src/nextjs-build/global-containers.Dockerfile lib/nextjs-build"
        },
        {
          "exec": "cp src/nextjs-build/global-functions.Dockerfile lib/nextjs-build"
        },
        {
          "exec": "cp src/nextjs-build/regional-containers.Dockerfile lib/nextjs-build"
        },
        {
          "spawn": "bundle:nextjs-build/cache-handler"
        },
        {
          "spawn": "bundle:nextjs-build/add-cache-handler"
        },
        {
          "spawn": "bundle:nextjs-build/symlink-full-route-cache"
        }
      ]
    },
    "bundle:lambdas/assets-deployment/assets-deployment.lambda": {
      "name": "bundle:lambdas/assets-deployment/assets-deployment.lambda",
      "description": "Create a JavaScript bundle from src/lambdas/assets-deployment/assets-deployment.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/lambdas/assets-deployment/assets-deployment.lambda.ts --target=\"node22\" --platform=\"node\" --outfile=\"assets/lambdas/assets-deployment/assets-deployment.lambda/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:@aws-sdk/*"
        }
      ]
    },
    "bundle:lambdas/assets-deployment/assets-deployment.lambda:watch": {
      "name": "bundle:lambdas/assets-deployment/assets-deployment.lambda:watch",
      "description": "Continuously update the JavaScript bundle from src/lambdas/assets-deployment/assets-deployment.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/lambdas/assets-deployment/assets-deployment.lambda.ts --target=\"node22\" --platform=\"node\" --outfile=\"assets/lambdas/assets-deployment/assets-deployment.lambda/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:@aws-sdk/* --watch"
        }
      ]
    },
    "bundle:lambdas/revalidate/revalidate.lambda": {
      "name": "bundle:lambdas/revalidate/revalidate.lambda",
      "description": "Create a JavaScript bundle from src/lambdas/revalidate/revalidate.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/lambdas/revalidate/revalidate.lambda.ts --target=\"node22\" --platform=\"node\" --outfile=\"assets/lambdas/revalidate/revalidate.lambda/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:@aws-sdk/*"
        }
      ]
    },
    "bundle:lambdas/revalidate/revalidate.lambda:watch": {
      "name": "bundle:lambdas/revalidate/revalidate.lambda:watch",
      "description": "Continuously update the JavaScript bundle from src/lambdas/revalidate/revalidate.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/lambdas/revalidate/revalidate.lambda.ts --target=\"node22\" --platform=\"node\" --outfile=\"assets/lambdas/revalidate/revalidate.lambda/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:@aws-sdk/* --watch"
        }
      ]
    },
    "bundle:lambdas/sign-fn-url/sign-fn-url.lambda": {
      "name": "bundle:lambdas/sign-fn-url/sign-fn-url.lambda",
      "description": "Create a JavaScript bundle from src/lambdas/sign-fn-url/sign-fn-url.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/lambdas/sign-fn-url/sign-fn-url.lambda.ts --target=\"node22\" --platform=\"node\" --outfile=\"assets/lambdas/sign-fn-url/sign-fn-url.lambda/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:@aws-sdk/*"
        }
      ]
    },
    "bundle:lambdas/sign-fn-url/sign-fn-url.lambda:watch": {
      "name": "bundle:lambdas/sign-fn-url/sign-fn-url.lambda:watch",
      "description": "Continuously update the JavaScript bundle from src/lambdas/sign-fn-url/sign-fn-url.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/lambdas/sign-fn-url/sign-fn-url.lambda.ts --target=\"node22\" --platform=\"node\" --outfile=\"assets/lambdas/sign-fn-url/sign-fn-url.lambda/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:@aws-sdk/* --watch"
        }
      ]
    },
    "bundle:nextjs-build/add-cache-handler": {
      "name": "bundle:nextjs-build/add-cache-handler",
      "description": "Create a JavaScript bundle from src/nextjs-build/add-cache-handler.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/nextjs-build/add-cache-handler.ts --target=\"node20\" --platform=\"node\" --outfile=\"lib/nextjs-build/add-cache-handler.mjs\" --format=esm"
        }
      ]
    },
    "bundle:nextjs-build/add-cache-handler:watch": {
      "name": "bundle:nextjs-build/add-cache-handler:watch",
      "description": "Continuously update the JavaScript bundle from src/nextjs-build/add-cache-handler.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/nextjs-build/add-cache-handler.ts --target=\"node20\" --platform=\"node\" --outfile=\"lib/nextjs-build/add-cache-handler.mjs\" --format=esm --watch"
        }
      ]
    },
    "bundle:nextjs-build/cache-handler": {
      "name": "bundle:nextjs-build/cache-handler",
      "description": "Create a JavaScript bundle from src/nextjs-build/cache-handler.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/nextjs-build/cache-handler.ts --target=\"node20\" --platform=\"node\" --outfile=\"lib/nextjs-build/cache-handler.cjs\""
        }
      ]
    },
    "bundle:nextjs-build/cache-handler:watch": {
      "name": "bundle:nextjs-build/cache-handler:watch",
      "description": "Continuously update the JavaScript bundle from src/nextjs-build/cache-handler.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/nextjs-build/cache-handler.ts --target=\"node20\" --platform=\"node\" --outfile=\"lib/nextjs-build/cache-handler.cjs\" --watch"
        }
      ]
    },
    "bundle:nextjs-build/symlink-full-route-cache": {
      "name": "bundle:nextjs-build/symlink-full-route-cache",
      "description": "Create a JavaScript bundle from src/nextjs-build/symlink-full-route-cache.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/nextjs-build/symlink-full-route-cache.ts --target=\"node20\" --platform=\"node\" --outfile=\"lib/nextjs-build/symlink-full-route-cache.mjs\" --format=esm"
        }
      ]
    },
    "bundle:nextjs-build/symlink-full-route-cache:watch": {
      "name": "bundle:nextjs-build/symlink-full-route-cache:watch",
      "description": "Continuously update the JavaScript bundle from src/nextjs-build/symlink-full-route-cache.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/nextjs-build/symlink-full-route-cache.ts --target=\"node20\" --platform=\"node\" --outfile=\"lib/nextjs-build/symlink-full-route-cache.mjs\" --format=esm --watch"
        }
      ]
    },
    "clobber": {
      "name": "clobber",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)"
      },
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \"scratch\" branch"
        },
        {
          "exec": "git checkout $BRANCH"
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin"
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit"
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files"
        },
        {
          "say": "ready to rock! (unpushed commits are under the \"scratch\" branch)"
        }
      ],
      "condition": "git diff --exit-code > /dev/null"
    },
    "compat": {
      "name": "compat",
      "description": "Perform API compatibility check against latest version",
      "steps": [
        {
          "exec": "jsii-diff npm:$(node -p \"require('./package.json').name\") -k --ignore-file .compatignore || (echo \"\nUNEXPECTED BREAKING CHANGES: add keys such as 'removed:constructs.Node.of' to .compatignore to skip.\n\" && exit 1)"
        }
      ]
    },
    "compile": {
      "name": "compile",
      "description": "Only compile",
      "steps": [
        {
          "exec": "jsii --silence-warnings=reserved-word"
        }
      ]
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files",
      "steps": [
        {
          "exec": "ts-node --project tsconfig.dev.json .projenrc.ts"
        }
      ]
    },
    "docgen": {
      "name": "docgen",
      "description": "Generate API.md from .jsii manifest",
      "steps": [
        {
          "exec": "jsii-docgen -o API.md"
        }
      ]
    },
    "eject": {
      "name": "eject",
      "description": "Remove projen from the project",
      "env": {
        "PROJEN_EJECTING": "true"
      },
      "steps": [
        {
          "spawn": "default"
        }
      ]
    },
    "eslint": {
      "name": "eslint",
      "description": "Runs eslint against the codebase",
      "env": {
        "ESLINT_USE_FLAT_CONFIG": "false"
      },
      "steps": [
        {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern $@ src test build-tools projenrc .projenrc.ts",
          "receiveArgs": true
        }
      ]
    },
    "install": {
      "name": "install",
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "steps": [
        {
          "exec": "pnpm i --no-frozen-lockfile"
        }
      ]
    },
    "install:ci": {
      "name": "install:ci",
      "description": "Install project dependencies using frozen lockfile",
      "steps": [
        {
          "exec": "pnpm i --frozen-lockfile"
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package",
      "steps": [
        {
          "spawn": "package:js",
          "condition": "node -e \"if (!process.env.CI) process.exit(1)\""
        },
        {
          "spawn": "package-all",
          "condition": "node -e \"if (process.env.CI) process.exit(1)\""
        }
      ]
    },
    "package-all": {
      "name": "package-all",
      "description": "Packages artifacts for all target languages",
      "steps": [
        {
          "spawn": "package:js"
        }
      ]
    },
    "package:js": {
      "name": "package:js",
      "description": "Create js language bindings",
      "steps": [
        {
          "exec": "jsii-pacmak -v --pack-command 'pnpm pack' --target js"
        }
      ]
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation",
      "steps": [
        {
          "spawn": "docgen"
        }
      ]
    },
    "post-upgrade": {
      "name": "post-upgrade",
      "description": "Runs after upgrading dependencies"
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation",
      "steps": [
        {
          "spawn": "bundle"
        }
      ]
    },
    "release": {
      "name": "release",
      "description": "Prepare a release from \"main\" branch",
      "env": {
        "RELEASE": "true"
      },
      "steps": [
        {
          "exec": "rm -fr dist"
        },
        {
          "spawn": "bump"
        },
        {
          "spawn": "build"
        },
        {
          "spawn": "unbump"
        },
        {
          "exec": "git diff --ignore-space-at-eol --exit-code"
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests",
      "steps": [
        {
          "exec": "jest --passWithNoTests --updateSnapshot",
          "receiveArgs": true
        },
        {
          "spawn": "eslint"
        }
      ]
    },
    "test:watch": {
      "name": "test:watch",
      "description": "Run jest in watch mode",
      "steps": [
        {
          "exec": "jest --watch"
        }
      ]
    },
    "unbump": {
      "name": "unbump",
      "description": "Restores version to 0.0.0",
      "env": {
        "OUTFILE": "package.json",
        "CHANGELOG": "dist/changelog.md",
        "BUMPFILE": "dist/version.txt",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": "",
        "BUMP_PACKAGE": "commit-and-tag-version@^12",
        "RELEASABLE_COMMITS": "git log --no-merges --oneline $LATEST_TAG..HEAD -E --grep \"^(feat|fix|chore|refactor|perf){1}(\\([^()[:space:]]+\\))?(!)?:[[:blank:]]+.+\""
      },
      "steps": [
        {
          "builtin": "release/reset-version"
        }
      ]
    },
    "upgrade": {
      "name": "upgrade",
      "description": "upgrade dependencies",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "pnpm dlx npm-check-updates@16 --upgrade --target=minor --peer --no-deprecated --dep=dev,peer,prod,optional --filter=@aws-crypto/sha256-js,@aws-sdk/client-s3,@aws-sdk/client-sqs,@aws-sdk/lib-storage,@mrgrain/jsii-struct-builder,@smithy/signature-v4,@types/aws-lambda,@types/jest,@types/mime-types,cdk-nag,esbuild,eslint-config-prettier,eslint-import-resolver-typescript,eslint-plugin-import,eslint-plugin-prettier,jest,jsii-diff,jsii-pacmak,mime-types,next,prettier,ts-jest,ts-node,typescript,undici"
        },
        {
          "exec": "pnpm i --no-frozen-lockfile"
        },
        {
          "exec": "pnpm update @aws-crypto/sha256-js @aws-sdk/client-s3 @aws-sdk/client-sqs @aws-sdk/lib-storage @mrgrain/jsii-struct-builder @smithy/signature-v4 @types/aws-lambda @types/jest @types/mime-types @types/node @typescript-eslint/eslint-plugin @typescript-eslint/parser cdk-nag commit-and-tag-version esbuild eslint-config-prettier eslint-import-resolver-typescript eslint-plugin-import eslint-plugin-prettier eslint jest jest-junit jsii-diff jsii-docgen jsii-pacmak jsii-rosetta jsii mime-types next prettier projen ts-jest ts-node typescript undici aws-cdk-lib constructs"
        },
        {
          "exec": "pnpm dlx projen"
        },
        {
          "spawn": "post-upgrade"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watch & compile in the background",
      "steps": [
        {
          "exec": "jsii -w --silence-warnings=reserved-word"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(pnpm -c exec \"node --print process.env.PATH\")"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run \"pnpm dlx projen\"."
}
